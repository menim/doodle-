@mixin basic-btn($btn-color, $btn-bg-color, $vertical-padding, $gorizont-padding, $size-font: 1.0625rem) {
  background: $btn-bg-color;
  border-radius: 3px;
  color: $btn-color;
  cursor: pointer;
  display: inline-block;
  font-family: $font-family-1;
  font-size: $size-font;
  line-height: 1;
  padding: $vertical-padding $gorizont-padding;
  text-align: center;
  transform: translateZ(0);
  transition: transform .3s linear;

  &::before {
    background: radial-gradient(ellipse at center, rgba(0, 0, 0, .35) 0%, rgba(0, 0, 0, 0) 80%);
    content: '';
    height: 10px;
    left: 5%;
    opacity: 0;
    pointer-events: none;
    position: absolute;
    top: 100%;
    transition: transform .3s, opacity .3s;
    width: 90%;
    z-index: -1;
  }

  &:hover,
  &:focus,
  &:active {
    border: 0;
    transform: translateY(-5px);

    &::before {
      opacity: 1;
      transform: translateY(5px);
    }
  }

  @include break-point(sm) {
    font-size: 1rem;
  }

  @include break-point(lg) {
    font-size: .9rem;
  }

  @include break-point($header-hlg-max) {
    font-size: 1rem;
  }
}

@mixin break-point($point) {

  @if $point == lg {

    @media only screen and (max-width: $screen-md-max) {

      @content;

    }
  } @else if $point == md {

    @media only screen and (max-width: $screen-sm-max) {

      @content;

    }
  } @else if $point == sm {

    @media only screen and (max-width: $screen-xs-max) {

      @content;

    }
  } @else if $point == xs {

    @media only screen and (max-width: $screen-xs-min) {

      @content;

    }
  } @else {

    @media only screen and (max-width: $point) {

      @content;

    }
  }
}


// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: '?',
    svg: '#' + str-replace($name, ' ', '_')
  );

  $formats: (
    otf: 'opentype',
    ttf: 'truetype'
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-display: swap;
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

@mixin gradient-linear-generator ($from, $to, $from-color, $to-color, $angle) {
  background-image: linear-gradient($angle, $from-color $from, $to-color $to);
}
